// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  password     String
  name         String
  role         Role      @default(USER)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  favorites    Favorite[]
  downloads    Download[]
  supportRequests SupportRequest[]
  contactMessages ContactMessage[]
  chatMessages    ChatMessage[]
  addedDocuments  Document[]   @relation("AddedByUser")
}

model Document {
  id          String    @id @default(uuid())
  title       String
  description String
  filePath    String
  fileSize    Int
  mimeType    String
  keywords    String?
  city        String?
  isActive    Boolean   @default(true)
  addedBy     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  favorites   Favorite[]
  downloads   Download[]
  user        User      @relation("AddedByUser", fields: [addedBy], references: [id])
}

model Favorite {
  id         String   @id @default(uuid())
  userId     String
  documentId String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  document   Document @relation(fields: [documentId], references: [id])

  @@unique([userId, documentId])
}

model Download {
  id         String   @id @default(uuid())
  userId     String
  documentId String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  document   Document @relation(fields: [documentId], references: [id])
}

model SupportRequest {
  id        String   @id @default(uuid())
  userId    String
  subject   String
  message   String
  priority  Priority @default(MEDIUM)
  status    Status   @default(OPEN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model ContactMessage {
  id        String   @id @default(uuid())
  userId    String?
  name      String
  email     String
  subject   String
  message   String
  category  String   @default("GENERAL")
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

model ChatMessage {
  id        String   @id @default(uuid())
  userId    String
  content   String
  isBot     Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Status {
  OPEN
  IN_PROGRESS
  CLOSED
} 