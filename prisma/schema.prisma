// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  name          String
  role          Role          @default(USER)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  documents     Document[]
  favorites     Favorite[]
  supportRequests SupportRequest[]
  contactMessages ContactMessage[]
  chatMessages   ChatMessage[]
  downloads      Download[]
}

model Document {
  id          String     @id @default(uuid())
  title       String
  description String
  city        String
  keywords    String[]
  filePath    String
  fileSize    Int
  mimeType    String
  content     String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  addedBy     String
  addedByUser User       @relation(fields: [addedBy], references: [id])
  favorites   Favorite[]
  downloads   Download[]
}

model Favorite {
  id         String   @id @default(uuid())
  userId     String
  documentId String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  document   Document @relation(fields: [documentId], references: [id])

  @@unique([userId, documentId])
}

model Download {
  id         String   @id @default(uuid())
  userId     String
  documentId String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  document   Document @relation(fields: [documentId], references: [id])
}

model SupportRequest {
  id        String   @id @default(uuid())
  subject   String
  message   String
  priority  Priority @default(MEDIUM)
  status    Status   @default(OPEN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model ChatMessage {
  id        String   @id @default(uuid())
  message   String
  isUser    Boolean
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Status {
  OPEN
  IN_PROGRESS
  CLOSED
} 