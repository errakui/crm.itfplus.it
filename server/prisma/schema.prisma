// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String     @id @default(uuid())
  email         String     @unique
  password      String
  name          String?
  role          Role       @default(USER)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  expiresAt     DateTime?  // Data di scadenza dell'account
  favorites     Favorite[]
  recentlyViewed Document[] @relation("RecentlyViewed")
  documents     Document[]
  chatSessions  ChatSession[]

  @@map("users")
}

model Document {
  id              String     @id @default(uuid())
  title           String
  description     String?
  filePath        String     @unique
  fileUrl         String
  fileSize        Int
  fileName        String?    // Nome del file originale
  fileType        String?    // Tipo di file (pdf, doc, etc)
  mimeType        String?    // MIME type del file
  cloudinaryPublicId String? // ID pubblico Cloudinary per gestire il file
  uploadDate      DateTime   @default(now())
  viewCount       Int        @default(0)
  downloadCount   Int        @default(0)
  favoriteCount   Int        @default(0)
  keywords        String[]   @default([])
  content         String?    // Campo per memorizzare il testo estratto dal PDF
  cities          String[]   @default([]) // Campo per memorizzare le citt√† associate al documento
  uploadedBy      String?
  textContent     String?    @db.Text
  relatedDocuments Document[] @relation("RelatedDocuments")
  documents       Document[] @relation("RelatedDocuments")
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  favorites       Favorite[]
  viewedBy        User[]       @relation("RecentlyViewed")
  isActive        Boolean     @default(true)

  @@map("documents")
}

model Favorite {
  id         String   @id @default(uuid())
  userId     String
  documentId String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([userId, documentId])
  @@map("favorites")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatSession {
  id        String   @id @default(uuid())
  userId    String
  messages  Json[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("chat_sessions")
}
